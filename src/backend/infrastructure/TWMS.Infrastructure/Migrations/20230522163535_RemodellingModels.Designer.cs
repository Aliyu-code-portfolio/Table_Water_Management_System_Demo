// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TWMS.Infrastructure.Persistence.DBContext;

#nullable disable

namespace TWMS.Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230522163535_RemodellingModels")]
    partial class RemodellingModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TWMS.Domain.Models.Customer.CustomerAddress", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AreaLocality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BuildingNumber")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Landmark")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State_Province")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Zip_PostalCode")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.ToTable("CustomerAddresses");

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("cab6f8d0-19e8-4859-a852-d589290bd217"),
                            AreaLocality = "Area 1",
                            BuildingNumber = 82,
                            City = "City 1",
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 5, 16, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4161),
                            DateModified = new DateTime(2023, 5, 1, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4157),
                            Landmark = "Landmark 1",
                            ModifiedBy = "John Doe",
                            State_Province = "State 1",
                            StreetName = "Street 1",
                            Zip_PostalCode = 44259
                        },
                        new
                        {
                            CustomerId = new Guid("b645a87f-8364-4a1c-9205-fe96071357e0"),
                            AreaLocality = "Area 2",
                            BuildingNumber = 2,
                            City = "City 2",
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 5, 14, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4176),
                            DateModified = new DateTime(2023, 5, 2, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4174),
                            Landmark = "Landmark 2",
                            ModifiedBy = "John Doe",
                            State_Province = "State 2",
                            StreetName = "Street 2",
                            Zip_PostalCode = 92512
                        },
                        new
                        {
                            CustomerId = new Guid("e6be5629-04e9-4c87-aefd-de72b5e4347d"),
                            AreaLocality = "Area 3",
                            BuildingNumber = 85,
                            City = "City 3",
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 5, 21, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4185),
                            DateModified = new DateTime(2023, 5, 7, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4183),
                            Landmark = "Landmark 3",
                            ModifiedBy = "John Doe",
                            State_Province = "State 3",
                            StreetName = "Street 3",
                            Zip_PostalCode = 44845
                        },
                        new
                        {
                            CustomerId = new Guid("6426d8f9-9848-4ca9-a30c-0894beb5f1e6"),
                            AreaLocality = "Area 4",
                            BuildingNumber = 83,
                            City = "City 4",
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 5, 16, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4194),
                            DateModified = new DateTime(2023, 5, 2, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4192),
                            Landmark = "Landmark 4",
                            ModifiedBy = "John Doe",
                            State_Province = "State 4",
                            StreetName = "Street 4",
                            Zip_PostalCode = 10549
                        },
                        new
                        {
                            CustomerId = new Guid("fd833381-c084-4e20-9e26-a260d259bea6"),
                            AreaLocality = "Area 5",
                            BuildingNumber = 72,
                            City = "City 5",
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 4, 26, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4245),
                            DateModified = new DateTime(2023, 5, 10, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4243),
                            Landmark = "Landmark 5",
                            ModifiedBy = "John Doe",
                            State_Province = "State 5",
                            StreetName = "Street 5",
                            Zip_PostalCode = 67677
                        },
                        new
                        {
                            CustomerId = new Guid("49c5f019-bae1-461e-a6a3-1675fa8bc898"),
                            AreaLocality = "Area 6",
                            BuildingNumber = 34,
                            City = "City 6",
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 4, 23, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4256),
                            DateModified = new DateTime(2023, 5, 6, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4254),
                            Landmark = "Landmark 6",
                            ModifiedBy = "John Doe",
                            State_Province = "State 6",
                            StreetName = "Street 6",
                            Zip_PostalCode = 44136
                        },
                        new
                        {
                            CustomerId = new Guid("bc694777-bf5c-4eca-a2ef-bd7296249927"),
                            AreaLocality = "Area 7",
                            BuildingNumber = 66,
                            City = "City 7",
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 4, 28, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4264),
                            DateModified = new DateTime(2023, 5, 16, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4262),
                            Landmark = "Landmark 7",
                            ModifiedBy = "John Doe",
                            State_Province = "State 7",
                            StreetName = "Street 7",
                            Zip_PostalCode = 69084
                        },
                        new
                        {
                            CustomerId = new Guid("c6597240-6964-462e-ab15-fc2d88e6fca6"),
                            AreaLocality = "Area 8",
                            BuildingNumber = 8,
                            City = "City 8",
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 4, 27, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4272),
                            DateModified = new DateTime(2023, 5, 14, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4270),
                            Landmark = "Landmark 8",
                            ModifiedBy = "John Doe",
                            State_Province = "State 8",
                            StreetName = "Street 8",
                            Zip_PostalCode = 43503
                        },
                        new
                        {
                            CustomerId = new Guid("6046297b-4c1a-4a1b-8d79-ed56bec310d3"),
                            AreaLocality = "Area 9",
                            BuildingNumber = 98,
                            City = "City 9",
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 5, 16, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4280),
                            DateModified = new DateTime(2023, 4, 26, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4278),
                            Landmark = "Landmark 9",
                            ModifiedBy = "John Doe",
                            State_Province = "State 9",
                            StreetName = "Street 9",
                            Zip_PostalCode = 38118
                        },
                        new
                        {
                            CustomerId = new Guid("07a42c43-a640-4b6a-9aa5-c2970b5ec4fd"),
                            AreaLocality = "Area 10",
                            BuildingNumber = 92,
                            City = "City 10",
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 5, 18, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4289),
                            DateModified = new DateTime(2023, 5, 9, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(4288),
                            Landmark = "Landmark 10",
                            ModifiedBy = "John Doe",
                            State_Province = "State 10",
                            StreetName = "Street 10",
                            Zip_PostalCode = 78314
                        });
                });

            modelBuilder.Entity("TWMS.Domain.Models.Customer.Customers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerAddressCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAddressCustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cab6f8d0-19e8-4859-a852-d589290bd217"),
                            Birthday = new DateTime(1992, 5, 22, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3759),
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 4, 28, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3739),
                            DateModified = new DateTime(2023, 5, 1, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3728),
                            EmailAddress = "customer1@example.com",
                            FullName = "Customer 1",
                            ModifiedBy = "John Doe",
                            PhoneNo = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("b645a87f-8364-4a1c-9205-fe96071357e0"),
                            Birthday = new DateTime(2001, 5, 22, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3779),
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 4, 30, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3776),
                            DateModified = new DateTime(2023, 4, 25, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3774),
                            EmailAddress = "customer2@example.com",
                            FullName = "Customer 2",
                            ModifiedBy = "John Doe",
                            PhoneNo = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("e6be5629-04e9-4c87-aefd-de72b5e4347d"),
                            Birthday = new DateTime(1999, 5, 22, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3790),
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 4, 25, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3788),
                            DateModified = new DateTime(2023, 4, 28, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3786),
                            EmailAddress = "customer3@example.com",
                            FullName = "Customer 3",
                            ModifiedBy = "John Doe",
                            PhoneNo = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("6426d8f9-9848-4ca9-a30c-0894beb5f1e6"),
                            Birthday = new DateTime(1997, 5, 22, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3800),
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 5, 9, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3798),
                            DateModified = new DateTime(2023, 5, 11, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3796),
                            EmailAddress = "customer4@example.com",
                            FullName = "Customer 4",
                            ModifiedBy = "John Doe",
                            PhoneNo = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("fd833381-c084-4e20-9e26-a260d259bea6"),
                            Birthday = new DateTime(1972, 5, 22, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3813),
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 5, 5, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3811),
                            DateModified = new DateTime(2023, 5, 9, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3808),
                            EmailAddress = "customer5@example.com",
                            FullName = "Customer 5",
                            ModifiedBy = "John Doe",
                            PhoneNo = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("49c5f019-bae1-461e-a6a3-1675fa8bc898"),
                            Birthday = new DateTime(1981, 5, 22, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3836),
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 5, 7, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3834),
                            DateModified = new DateTime(2023, 5, 7, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3831),
                            EmailAddress = "customer6@example.com",
                            FullName = "Customer 6",
                            ModifiedBy = "John Doe",
                            PhoneNo = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("bc694777-bf5c-4eca-a2ef-bd7296249927"),
                            Birthday = new DateTime(1990, 5, 22, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3847),
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 5, 16, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3845),
                            DateModified = new DateTime(2023, 5, 14, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3842),
                            EmailAddress = "customer7@example.com",
                            FullName = "Customer 7",
                            ModifiedBy = "John Doe",
                            PhoneNo = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("c6597240-6964-462e-ab15-fc2d88e6fca6"),
                            Birthday = new DateTime(1965, 5, 22, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3859),
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 4, 28, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3855),
                            DateModified = new DateTime(2023, 5, 4, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3853),
                            EmailAddress = "customer8@example.com",
                            FullName = "Customer 8",
                            ModifiedBy = "John Doe",
                            PhoneNo = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("6046297b-4c1a-4a1b-8d79-ed56bec310d3"),
                            Birthday = new DateTime(1964, 5, 22, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3870),
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 5, 3, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3868),
                            DateModified = new DateTime(2023, 4, 23, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3865),
                            EmailAddress = "customer9@example.com",
                            FullName = "Customer 9",
                            ModifiedBy = "John Doe",
                            PhoneNo = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("07a42c43-a640-4b6a-9aa5-c2970b5ec4fd"),
                            Birthday = new DateTime(2004, 5, 22, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3884),
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2023, 5, 16, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3879),
                            DateModified = new DateTime(2023, 5, 8, 17, 35, 35, 496, DateTimeKind.Local).AddTicks(3877),
                            EmailAddress = "customer10@example.com",
                            FullName = "Customer 10",
                            ModifiedBy = "John Doe",
                            PhoneNo = "1234567890"
                        });
                });

            modelBuilder.Entity("TWMS.Domain.Models.Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Order.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomersId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Product.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateProduced")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductionCost")
                        .HasColumnType("money");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("RetailPricePerUnit")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Product.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Staff.Guarantor", b =>
                {
                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<Guid?>("GuarantorAddressStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("StaffId");

                    b.HasIndex("GuarantorAddressStaffId");

                    b.ToTable("Guarantor");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Staff.GuarantorAddress", b =>
                {
                    b.Property<Guid>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AreaLocality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BuildingNumber")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Landmark")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State_Province")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Zip_PostalCode")
                        .HasColumnType("int");

                    b.HasKey("StaffId");

                    b.ToTable("GuarantorAddress");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Staff.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money");

                    b.Property<Guid?>("StaffAddressStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaffAddressStaffId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Staff.StaffAddress", b =>
                {
                    b.Property<Guid>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AreaLocality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BuildingNumber")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Landmark")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State_Province")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Zip_PostalCode")
                        .HasColumnType("int");

                    b.HasKey("StaffId");

                    b.ToTable("StaffAddresses");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Customer.Customers", b =>
                {
                    b.HasOne("TWMS.Domain.Models.Customer.CustomerAddress", "CustomerAddress")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerAddressCustomerId");

                    b.Navigation("CustomerAddress");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Order.Order", b =>
                {
                    b.HasOne("TWMS.Domain.Models.Customer.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Order.OrderItem", b =>
                {
                    b.HasOne("TWMS.Domain.Models.Customer.Customers", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomersId");

                    b.HasOne("TWMS.Domain.Models.Order.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TWMS.Domain.Models.Product.ProductType", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Product.ProductType", b =>
                {
                    b.HasOne("TWMS.Domain.Models.Product.Inventory", null)
                        .WithMany("Products")
                        .HasForeignKey("InventoryId");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Staff.Guarantor", b =>
                {
                    b.HasOne("TWMS.Domain.Models.Staff.GuarantorAddress", "GuarantorAddress")
                        .WithMany("Guarantors")
                        .HasForeignKey("GuarantorAddressStaffId");

                    b.HasOne("TWMS.Domain.Models.Staff.Staff", null)
                        .WithOne("Guarantor")
                        .HasForeignKey("TWMS.Domain.Models.Staff.Guarantor", "StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuarantorAddress");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Staff.Staff", b =>
                {
                    b.HasOne("TWMS.Domain.Models.Staff.StaffAddress", "StaffAddress")
                        .WithMany("Staff")
                        .HasForeignKey("StaffAddressStaffId");

                    b.Navigation("StaffAddress");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Customer.CustomerAddress", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Customer.Customers", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Order.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Product.Inventory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Staff.GuarantorAddress", b =>
                {
                    b.Navigation("Guarantors");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Staff.Staff", b =>
                {
                    b.Navigation("Guarantor");
                });

            modelBuilder.Entity("TWMS.Domain.Models.Staff.StaffAddress", b =>
                {
                    b.Navigation("Staff");
                });
#pragma warning restore 612, 618
        }
    }
}
